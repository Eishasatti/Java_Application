
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author EISHA
 */
public class ManagePatient extends javax.swing.JFrame {
         String name,gender,age_pat,phoneno,id,emg_cont;
         long ph_no,emg_no;
         int age;
        

    /**
     * Creates new form ManagePatient
     */
          public void clearFields(){
        pat_name.setText("");
        pat_gender.setText("");
        pat_age.setText("");
        pat_phone.setText("");
        pat_emerg_no.setText("");
        pat_id.setText("");
    }
    public void getValues(){
        name = pat_name.getText();
    gender = pat_gender.getText();
    age_pat = pat_age.getText();
    
    phoneno = pat_phone.getText();
    emg_cont = pat_emerg_no.getText();
    id = pat_id.getText();
        
    }
 public boolean ValidateInput() {
    // Validate Name
    if (name.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Name cannot be empty.", "Input Error", JOptionPane.ERROR_MESSAGE);
        return false;
    }
    
    // Validate Gender
    if (!gender.equalsIgnoreCase("M") && !gender.equalsIgnoreCase("F")) {
        JOptionPane.showMessageDialog(null, "Gender must be 'M' or 'F'.", "Input Error", JOptionPane.ERROR_MESSAGE);
        return false;
    }
    
    // Validate Age
    try {
        age = Integer.parseInt(age_pat);
        if (age <= 0) {
            JOptionPane.showMessageDialog(null, "Age must be a positive number.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Invalid age input.", "Input Error", JOptionPane.ERROR_MESSAGE);
        return false;
    }
    
    // Validate Phone Number
    try {
        ph_no = Long.parseLong(phoneno);
        if (phoneno.length() != 10) {
            JOptionPane.showMessageDialog(null, "Phone number must be 10 digits.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Invalid phone number.", "Input Error", JOptionPane.ERROR_MESSAGE);
        return false;
    }
    
    // Validate Emergency Contact Number
    try {
        emg_no = Long.parseLong(emg_cont);
        if (emg_cont.length() != 10) {
            JOptionPane.showMessageDialog(null, "Emergency contact number must be 10 digits.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Invalid emergency contact number.", "Input Error", JOptionPane.ERROR_MESSAGE);
        return false;
    }
    
    // Validate ID
    if (id.isEmpty()) {
        JOptionPane.showMessageDialog(null, "ID cannot be empty.", "Input Error", JOptionPane.ERROR_MESSAGE);
        return false;
    }
//    Patient patient=new Patient();
    return true; 
  
// If all validations pass
}
   
   public ManagePatient() {
        initComponents();
        
//        notes_below.setEditable(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        pat_age = new javax.swing.JTextField();
        pat_id = new javax.swing.JTextField();
        pat_phone = new javax.swing.JTextField();
        pat_emerg_no = new javax.swing.JTextField();
        pat_gender = new javax.swing.JTextField();
        pat_name = new javax.swing.JTextField();
        add_patient = new javax.swing.JButton();
        delete_patient = new javax.swing.JButton();
        search_patient = new javax.swing.JButton();
        update_patient = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 102, 102));
        jLabel1.setText("Manage Patient");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(195, 6, -1, -1));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Patient ID(CNIC):");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 99, -1, -1));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Name:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 188, -1, -1));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("Gender:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(263, 99, -1, -1));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setText("Phone #:");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(536, 99, -1, -1));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setText("Emergency Contact:");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(536, 188, -1, -1));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setText("Age:");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(263, 188, -1, -1));
        getContentPane().add(pat_age, new org.netbeans.lib.awtextra.AbsoluteConstraints(263, 214, 140, 35));
        getContentPane().add(pat_id, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 122, 140, 35));
        getContentPane().add(pat_phone, new org.netbeans.lib.awtextra.AbsoluteConstraints(536, 122, 140, 35));
        getContentPane().add(pat_emerg_no, new org.netbeans.lib.awtextra.AbsoluteConstraints(536, 214, 140, 35));
        getContentPane().add(pat_gender, new org.netbeans.lib.awtextra.AbsoluteConstraints(263, 122, 140, 35));
        getContentPane().add(pat_name, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 214, 140, 35));

        add_patient.setBackground(new java.awt.Color(255, 255, 204));
        add_patient.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        add_patient.setText("ADD");
        add_patient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_patientActionPerformed(evt);
            }
        });
        getContentPane().add(add_patient, new org.netbeans.lib.awtextra.AbsoluteConstraints(102, 279, 100, 40));

        delete_patient.setBackground(new java.awt.Color(255, 255, 204));
        delete_patient.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        delete_patient.setText("DELETE");
        delete_patient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete_patientActionPerformed(evt);
            }
        });
        getContentPane().add(delete_patient, new org.netbeans.lib.awtextra.AbsoluteConstraints(249, 279, 100, 40));

        search_patient.setBackground(new java.awt.Color(255, 255, 204));
        search_patient.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        search_patient.setText("SEARCH");
        search_patient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search_patientActionPerformed(evt);
            }
        });
        getContentPane().add(search_patient, new org.netbeans.lib.awtextra.AbsoluteConstraints(409, 279, 100, 40));

        update_patient.setBackground(new java.awt.Color(255, 255, 204));
        update_patient.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        update_patient.setText("UPDATE");
        update_patient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                update_patientActionPerformed(evt);
            }
        });
        getContentPane().add(update_patient, new org.netbeans.lib.awtextra.AbsoluteConstraints(552, 279, 100, 40));

        btnBack.setBackground(new java.awt.Color(255, 51, 51));
        btnBack.setText("<-");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        getContentPane().add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        jPanel1.setBackground(new java.awt.Color(255, 204, 204));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 750, 410));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void delete_patientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delete_patientActionPerformed
        // TODO add your handling code here:
        String id1=pat_id.getText(); // Retrieve the values from the input fields
    
    if (id1!=null) {  // Validate the input fields
        // Create a new Database_Connection instance
         Patient patient=new Patient();
    patient.DeletefromDb(id1);
    }else{
        JOptionPane.showMessageDialog(null, "Error: Unable to delete for patient.ID required");
            
    }
    }//GEN-LAST:event_delete_patientActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        new ReceptionistInterface().setVisible(true);
    }//GEN-LAST:event_btnBackActionPerformed

    private void add_patientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_patientActionPerformed
        // TODO add your handling code here:
      getValues();  // Retrieve the values from the input fields
    
    if (ValidateInput()) {  // Validate the input fields
        // Create a new Database_Connection instance
    Patient patient=new Patient();
    patient.Insert(id,gender, ph_no, name, age, emg_no);
   
      
        
    }//GEN-LAST:event_add_patientActionPerformed
}
   
    private void update_patientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_update_patientActionPerformed
        // TODO add your handling code here:
  getValues();  // Retrieve the values from the input fields
    
    if (ValidateInput()) {  // Validate the input fields
        // Create a new Database_Connection instance
        Patient patient=new Patient();
    patient.UpdateInDb(id,gender, ph_no, name, age, emg_no);
    }//GEN-LAST:event_update_patientActionPerformed
    }
    private void search_patientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search_patientActionPerformed
        // TODO add your handling code here:
         String id2=pat_id.getText(); // Retrieve the values from the input fields
    
     // Validate the input fields
        // Create a new Database_Connection instance
        if(id2!=null){
            
            Database_Connection dbConnection = new Database_Connection();
        Connection conn = dbConnection.getConnection();  // Get the connection

        // SQL select query to search for a patient by PatientId
        String searchQuery = "SELECT * FROM patient WHERE PatientId = ?";
        
        try (PreparedStatement stmt = conn.prepareStatement(searchQuery)) {
            // Set the PatientId for the record to search
            stmt.setString(1, id2);  // Assuming `id` is the correct PatientId to search
            
            // Execute the search query
            ResultSet rs = stmt.executeQuery();

            // Check if a record is found
            if (rs.next()) {
                // Retrieve data from the result set and populate fields (example)
                String name = rs.getString("Name");
                String gender = rs.getString("Gender");
                String age = rs.getString("Age");
                String phoneNo = rs.getString("Phoneno");
                String emgContact = rs.getString("EmgContact");

                // Display or use the data (e.g., in your form fields)
//                JOptionPane.showMessageDialog(null, "Patient found: " + name + ", " + gender + ", " + age);
                
                // Optionally, you can populate form fields with the retrieved data
                // For example: 
                 pat_name.setText(name);
                 pat_gender.setText(gender);
                 pat_age.setText(age);
                 pat_phone.setText(phoneNo);
                 pat_emerg_no.setText(emgContact);
                
            } else {
                JOptionPane.showMessageDialog(null, "No patient found with that PatientId.");
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error: Unable to search for patient.");
            
            ex.printStackTrace();
        } finally {
            // Close the database connection
            dbConnection.closeConnection();
        }

        }
        
    
    }//GEN-LAST:event_search_patientActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManagePatient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManagePatient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManagePatient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManagePatient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManagePatient().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add_patient;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton delete_patient;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField pat_age;
    private javax.swing.JTextField pat_emerg_no;
    private javax.swing.JTextField pat_gender;
    private javax.swing.JTextField pat_id;
    private javax.swing.JTextField pat_name;
    private javax.swing.JTextField pat_phone;
    private javax.swing.JButton search_patient;
    private javax.swing.JButton update_patient;
    // End of variables declaration//GEN-END:variables
}
